services:
  backend:
    env_file: 'backend.env'
    build:
      context: .
      target: backend
    ports:
      - '8080:8080'
      - '9090:9090'  # Metrics port
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:8080/health']
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - app-network
    depends_on:
      - llm
      - redis
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0

  frontend:
    build:
      context: ./frontend
    ports:
      - '3000:3000'
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network

  # Redis for token metrics storage
  redis:
    image: redis:7.2-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-} --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 3s
      timeout: 3s
      retries: 5

  # Redis with TimeSeries module for advanced time-series analytics
  redis-timeseries:
    image: redislabs/redistimeseries:latest
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-}
      --appendonly yes
      --loadmodule /usr/lib/redis/modules/redistimeseries.so
    ports:
      - '6380:6379'
    volumes:
      - redis-timeseries-data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', '-p', '6379', '--raw', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Exporter for Prometheus integration
  redis-exporter:
    image: oliver006/redis_exporter:v1.56.0
    ports:
      - '9121:9121'
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - app-network
    depends_on:
      - redis

  # TimeSeries Exporter for Redis TimeSeries
  redis-timeseries-exporter:
    image: oliver006/redis_exporter:v1.56.0
    ports:
      - '9122:9121'
    environment:
      - REDIS_ADDR=redis://redis-timeseries:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - app-network
    depends_on:
      - redis-timeseries

  # Token Analytics Service - Real-time Redis data processor
  token-analytics:
    build:
      context: .
      target: token-analytics
      dockerfile: Dockerfile.analytics
    ports:
      - '8081:8081'  # Analytics API port
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0
      - ANALYTICS_PORT=8081
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:8081/health']
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis TimeSeries Service - Advanced time-series analytics
  redis-timeseries-service:
    build:
      context: .
      target: redis-timeseries-service
      dockerfile: Dockerfile.timeseries
    ports:
      - '8082:8082'  # TimeSeries API port
    environment:
      - REDIS_ADDR=redis-timeseries:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0
      - TIMESERIES_PORT=8082
    networks:
      - app-network
    depends_on:
      - redis-timeseries
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:8082/health']
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-admin-api'  # Enable admin API for rule management
    ports:
      - '9091:9090'
    networks:
      - app-network
    depends_on:
      - redis-exporter
      - redis-timeseries-exporter

  grafana:
    image: grafana/grafana:10.1.0
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      # Redis datasource plugin
      - GF_INSTALL_PLUGINS=redis-datasource
      # Enable Redis datasource
      - GF_FEATURE_TOGGLES_ENABLE=redisDataSource
    ports:
      - '3001:3000'
    depends_on:
      - prometheus
      - redis
      - token-analytics
      - redis-timeseries-service
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:1.46
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - '16686:16686'  # UI
      - '4317:4317'    # OTLP gRPC
      - '4318:4318'    # OTLP HTTP
    networks:
      - app-network

  # Alertmanager for handling Prometheus alerts
  alertmanager:
    image: prom/alertmanager:v0.25.0
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    ports:
      - '9093:9093'
    networks:
      - app-network
    profiles:
      - monitoring  # Only start with --profile monitoring

  # New LLM service using Docker Compose's model provider
  llm:
    provider:
      type: model
      options:
        model: ${LLM_MODEL_NAME:-ai/llama3.2:1B-Q8_0}

  # Redis Insight for Redis management and debugging
  redis-insight:
    image: redislabs/redisinsight:latest
    ports:
      - '8001:8001'
    environment:
      - RIPORT=8001
    networks:
      - app-network
    depends_on:
      - redis
      - redis-timeseries
    profiles:
      - debug  # Only start with --profile debug

volumes:
  grafana-data:
  redis-data:
  redis-timeseries-data:

networks:
  app-network:
    driver: bridge
